var getMap = function() {

  // prevent number highlighting on double-click
  $(".map").mousedown(function(e){ e.preventDefault(); });

  var w = 1300;
  var h = 700;

  var blueStates = [];
  var redStates = [];
  var blueEV = 0;
  var redEV = 0;
  var unassignedEV = 538;

  var projection = d3.geo.albersUsa()
      .translate([w/2, h/2])
      .scale([1500]);

  var path = d3.geo.path()
      .projection(projection);

  var svg = d3.select(".map")
      .append("svg")
      .attr("width", w)
      .attr("height", h);

  var tip = d3.tip()
      .attr("class", "d3-tip")
      .offset(function (d) {
        if (d.abbr === "DC") {
          return [20,100]
        } else if (d.abbr === "NJ") {
          return [-5,0]
        } else if (d.abbr === "RI") {
          return [20,80]
        } else { return [10,0] }
      })
      .html(function(d){
        return d.properties.name + ": " + d.ev;
      });

  svg.call(tip);

  d3.json("/us-states.json", function(json) {
    svg.selectAll("path")
        .data(json.features)
        .enter()
        .append("path")
        .attr("d", path)
        .classed("neutral", true)
        .attr("id", "states")
        .on("click", click)
        .on("contextmenu", rightClick)
        .on('mouseover', tip.show)
        .on('mouseout', tip.hide);
    svg.selectAll("text")
        .data(json.features)
        .enter()
        .append("text")
        .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
        .attr("dx", function (d) {
          return d.dx
        })
        .attr("dy", function (d) {
          return d.dy
        })
        .attr("class", "ev")
        .attr("style", function (d) {
            if (d.abbr === "DE" || d.abbr === "HI" || d.abbr === "RI") {
              return "fill: black"
            } else {
              return "fill: white"
            }
        })
        .text(function(d) { return d.ev; });

    var populateMap = function() {
      var userMapDataObject = userMapData.replace(/&quot;/g, '"').replace(/=&gt;/g, ":");
      userMapDataObject = JSON.parse(userMapDataObject);
      var blueStateArray = userMapDataObject["blueStates"];
      var redStateArray = userMapDataObject["redStates"];
      $.each(json.features, function(i, attrs) {
        var stateName = attrs.properties.name;
        if ( blueStateArray.includes(stateName) ) {
          attrs.color = "blue";
          // if (this.classList == "neutral") {
          //   d3.select(this)
          //       .classed({"neutral": false, "blue": true});
        } else if ( redStateArray.includes(stateName) ) {
          attrs.color = "red";
          // if (this.classList == "neutral") {
          //   d3.select(this)
          //       .classed({"neutral": false, "blue": true});
        }
      });
    };

    if (userMapData) {
      populateMap();
    };

});

  var click = function(d) {
    if (this.classList == "neutral") {
      d3.select(this)
          .classed({"neutral": false, "blue": true});
      blueStates.push(d.properties.name);
      blueEV += d.ev;
      unassignedEV -= d.ev;
    } else if (this.classList == "blue") {
      d3.select(this)
          .classed({"blue": false, "red": true});
      blueStates.splice($.inArray(d.properties.name, blueStates),1);
      blueEV -= d.ev;
      redStates.push(d.properties.name);
      redEV += d.ev;
    } else {
      d3.select(this)
          .classed({"red": false, "neutral": true});
      redStates.splice($.inArray(d.properties.name, redStates),1);
      redEV -= d.ev;
      unassignedEV += d.ev;
    };
    checkForWinner();
  };

  var rightClick = function(d) {
    if (this.classList == "neutral") {
      d3.select(this)
      .classed({"neutral": false, "red": true});
      redStates.push(d.properties.name);
      redEV += d.ev;
      unassignedEV -= d.ev;
    } else if (this.classList == "blue") {
      d3.select(this)
      .classed({"blue": false, "neutral": true});
      blueStates.splice($.inArray(d.properties.name, blueStates),1);
      blueEV -= d.ev;
      unassignedEV += d.ev;
    } else {
      d3.select(this)
      .classed({"red": false, "blue": true});
      redStates.splice($.inArray(d.properties.name, redStates),1);
      redEV -= d.ev;
      blueStates.push(d.properties.name);
      blueEV += d.ev;
    };
    checkForWinner();
  };

  var updateTally = function() {
    $("#dems").text(blueEV);
    $("#reps").text(redEV);
    $("#unassigned").text(unassignedEV);

    mapData = {};
    mapData["blue"] = blueEV;
    mapData["red"] = redEV;
    mapData["blueStates"] = blueStates;
    mapData["redStates"] = redStates;
    mapData = JSON.stringify(mapData);
    $("#map_data").val(mapData);
  };

  var checkForWinner = function() {
    updateTally();
    if (blueEV >= 270) {
      if (!$(".dem-tally").children(".winner").length) {
      $(".dem-tally").prepend('<div class="winner"><%= image_tag("check.png") %> winner </div>');
    }} else {
      $(".dem-tally").children(".winner").remove();
    };
    if (redEV >= 270) {
      if (!$(".rep-tally").children(".winner").length) {
      $(".rep-tally").prepend('<div class="winner"><%= image_tag("check.png") %> winner </div>');
    }} else {
      $(".rep-tally").children(".winner").remove();
    };
  };

  var reset = function() {
    d3.selectAll("path")
    .classed({"neutral": true, "red": false, "blue": false});
    blueEV = 0;
    redEV = 0;
    unassignedEV = 538;
    updateTally();
    $(".dem-tally").children(".winner").remove();
    $(".rep-tally").children(".winner").remove();
  };

  $(".reset").on("click", reset);

}
